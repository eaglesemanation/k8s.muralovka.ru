# -*- mode: ruby -*-
# vi: set ft=ruby :

IMAGE_NAME = 'generic/debian11'

K3S_MASTERS = 1
K3S_WORKERS = 2

NETWORK_PREFIX = '10.50.245.'
NETWORK_PAD = 10

Vagrant.configure("2") do |config|
  config.vm.synced_folder '.', '/vagrant', disabled: true

  config.vm.define "smb_server" do |node|
    node.vm.box = IMAGE_NAME
    node.vm.hostname = "smb-server"

    node.vm.network :private_network,
      :ip => "#{NETWORK_PREFIX}2",
      :libvirt__forward_mode => 'route'

    node.vm.provider :libvirt do |libvirt|
      libvirt.cpus = 1
      libvirt.memory = 256
    end
  end

  (1..K3S_WORKERS).each do |node_id|
    config.vm.define "k3s_worker_#{node_id}" do |node|
      node.vm.box = IMAGE_NAME
      node.vm.hostname = "k3s-worker-#{node_id}"

      node.vm.network :private_network,
        :ip => "#{NETWORK_PREFIX}#{NETWORK_PAD + K3S_MASTERS + node_id}",
        :libvirt__forward_mode => 'route'

      node.vm.provider :libvirt do |libvirt|
        libvirt.cpus = 1
        libvirt.memory = 1024
      end
    end
  end

  (1..K3S_MASTERS).each do |node_id|
    node_ip = "#{NETWORK_PREFIX}#{NETWORK_PAD + node_id}"

    config.vm.define "k3s_master_#{node_id}" do |node|
      node.vm.box = IMAGE_NAME
      node.vm.hostname = "k3s-master-#{node_id}"

      node.vm.network :private_network,
        :ip => node_ip,
        :libvirt__forward_mode => 'route'

      node.vm.provider :libvirt do |libvirt|
        libvirt.cpus = 2
        libvirt.memory = 2048
      end

      # Make Vagrant think it provisions only 1 node
      if node_id == K3S_MASTERS then
        node.vm.provision :ansible do |ansible|
          ansible.playbook = 'playbooks/provision.yaml'
          # Actually provision all nodes
          ansible.limit = 'all,localhost'
          ansible.galaxy_command = 'ansible-galaxy install -r %{role_file}'
          ansible.galaxy_role_file = './requirements.yaml'
          ansible.vault_password_file = './.vault-pass'
          ansible.extra_vars = {
            'k3s_master_ip': node_ip
          }
          ansible.groups = {
            'k3s_masters' => ["k3s_master_[1:#{K3S_MASTERS}]"],
            'k3s_workers' => ["k3s_worker_[1:#{K3S_WORKERS}]"],
            'k3s:children' => ['k3s_masters', 'k3s_workers'],
            'smb_servers' => ['smb_server']
          }
        end

        # Triggers only support shell provisioner
        node.trigger.after :destroy do |trigger|
          trigger.info = 'Removing cluster from kubecfg'
          trigger.run = {inline: 'ansible-playbook playbooks/destroy.yaml'}
        end
      end
    end
  end
end
